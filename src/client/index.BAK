<!DOCTYPE html>
<html>
	<head>
		<title>Example webrtc.io</title>
		<link type="text/css" href="./style.css" rel="stylesheet"></link>
	</head>

	<script src="./webrtc4all.js"></script>
	<script src="./utf.js"></script>
	<script src="./webrtc.js"></script>

	<body onload="init()">
		<div id="videos">
<!--
			<video id="you" autoplay></video>
-->
		</div>
		<div id="chatbox">
			<div id="messages">
			</div>
			<div id="chat">
				<input id="chatinput" type="text"/>
			</div>
		</div>
	</body>
	<script>
	var videos = [];
	WebRtc4all_Init();

	function getNumPerRow() {
		var len = videos.length;
		var biggest;

		// Ensure length is	even for better	division.
		if (len % 2 === 1) {
			len++;
		}

		biggest	= Math.ceil(Math.sqrt(len));
		while (len % biggest !== 0) {
			biggest++;
		}
		return biggest;
	}

	function subdivideVideos() {
		var	perRow = getNumPerRow();
		var	numInRow = 0;
		for	(var i = 0, len	= videos.length; i < len; i++) {
			var video = videos[i];
			setWH(video, i);
			numInRow = (numInRow + 1) % perRow;
		}
	}

	function setWH(video, i) {
		var	perRow = getNumPerRow();
		var	perColumn =	Math.ceil(videos.length	/ perRow);
		var	width = Math.floor((window.innerWidth - 200) / perRow);
		var	height = Math.floor(window.innerHeight / perColumn);
		console.log(width, height);
		video.width	= width;
		video.height = height;
		video.style.position = "absolute";
		video.style.left = (i %	perRow)	* width	+ "px";
		video.style.top	= Math.floor(i / perRow) * height +	"px";
	}

	function cloneVideo(domId, socketId) {
		var video = document.getElementById(domId);
		var clone = video.cloneNode(false);
		clone.id = "remote" + socketId;
		document.getElementById('videos').appendChild(clone);
		videos.push(clone);
		WebRtc4all_AddRemoteDisplay(clone);
		return clone;
	}

	function removeVideo(socketId) {
		var video = document.getElementById('remote' + socketId);
		if (video) {
			videos.splice(videos.indexOf(video), 1);
			video.parentNode.removeChild(video);
		}
	}

	function initChat() {
		var input = document.getElementById("chatinput");
		input.addEventListener('keydown', function(event) {
			var key = event.which || event.keyCode;
			if (key === 13) {
				rtc.ws.send({'eventName':'chat msg', 'data': {'string': input.value}});
				addToChat(input.value);
				input.value	= "";
			}
		}, false);
		rtc.on('receive chat msg', function(data) {
			console.log(data.color);
			addToChat(data.msg, data.color.toString(16));
		});
	}

	function addToChat(msg, color) {
		var messages = document.getElementById('messages');
		msg = sanitize(msg);
		if (color) {
		  msg =	'<span style="color: #' + color + ';">' + msg + '</span>';
		} else {
		  msg = "<strong>" + msg + "</strong>";
		}
		messages.innerHTML = messages.innerHTML	+ msg + '<br>';
	}

	function sanitize(msg) {
		return msg.replace(/</g, '&lt;');
	}

	function init() {
		if (WebRtc4all_GetType() != WebRtcType_e.NATIVE) {
			WebRtc4all_SetLocalDisplay(document.getElementById("videos"), "you"); // FIXME: move to SIPml.* API
		} else {
			var v = document.getElementById("videos");
			v.innerHTML = "<video id=\"you\" autoplay></video>";
		}

		rtc.createStream('you', function(stream) {
			videos.push(document.getElementById('you'));
			rtc.attachStream(stream, 'you');
			subdivideVideos();
		});

		var room = window.location.hash.slice(1) || 'room';

		rtc.connect(location.host, 8282, room);
		rtc.on('add remote stream', function(stream, socketId) {
console.log("ADDING REMOTE STREAM...");
			var clone = cloneVideo('you', socketId);
			rtc.attachStream(stream, clone.id);
			subdivideVideos();
		});
		rtc.on('disconnect stream', function(data) {
console.log('remove' + JSON.stringify(data));
			removeVideo(data);
		});
		initChat();
	}

	window.onresize = function(event) {
		subdivideVideos();
	};

	window.onunload = function(event) {
		rtc.fire('client close', event);
//		var json = JSON.stringify({eventName: 'disconnect', data: {'room': rtc.room}});
//		rtc.ws.send(json);
		setTimeout(function() {}, 1000);
	};
	</script>
</html>
